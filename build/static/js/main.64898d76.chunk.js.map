{"version":3,"sources":["components/InputComponent.js","components/Persons.js","components/PersonForm.js","services/personsApi.js","components/Notification.js","App.js","index.js"],"names":["Filter","inputText","inputValueState","onChangeHandler","value","onChange","Persons","displayedPersons","deletePersonApiFunc","map","person","name","number","onClick","id","PersonForm","addPerson","newName","handleNewName","newTel","handleNewTel","onSubmit","autoComplete","type","personsUrl","axios","get","personObject","post","delete","patch","ErrorNotification","notificationMessage","className","Notification","App","useState","persons","setPersons","setDisplayedPersons","notificationMsg","setNotificationMsg","errorMsg","setErrorMsg","setNewName","setNewTel","newSearch","setNewSearch","useEffect","personsApi","then","rsp","data","displayNotificationMsg","notificationSetter","notificationText","setTimeout","event","target","filteredPersons","filter","toLowerCase","includes","preventDefault","existingPerson","length","window","confirm","updateObject","console","log","catch","err","message","personItem","newDisplayPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64898d76.chunk.js","sourcesContent":["import React from \"react-dom\";\n\nexport const Filter = ({ inputText, inputValueState, onChangeHandler }) => {\n  return (\n    <div>\n      {\" \"}\n      {inputText} <input value={inputValueState} onChange={onChangeHandler} />{\" \"}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Persons = ({ displayedPersons, deletePersonApiFunc }) => {\n  return (\n    <div>\n      <h2>Numbers</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Name:</th>\n            <th>Number:</th>\n          </tr>\n          {displayedPersons.map((person) => (\n            <tr key={person.id}>\n              <td>{person.name}</td>\n              <td>{person.number}</td>\n              <td>\n                <button onClick={() => deletePersonApiFunc(person.id)}>\n                  delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PersonForm = ({\n  addPerson,\n  newName,\n  handleNewName,\n  newTel,\n  handleNewTel,\n}) => (\n  <>\n    <form onSubmit={addPerson} autoComplete=\"off\">\n      <div>\n        name: <input value={newName} onChange={handleNewName} />\n      </div>\n      <div>\n        tel: <input value={newTel} onChange={handleNewTel}></input>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  </>\n);\n","import axios from \"axios\";\n\nconst personsUrl = \"./api/persons\";\n\nconst getAll = () => axios.get(personsUrl);\n\nconst addPerson = (personObject) => {\n  return axios.post(personsUrl, personObject);\n};\n\nconst removePerson = (id) => {\n  return axios.delete(`${personsUrl}/${id}`);\n};\n\nconst updatePerson = (personObject) => {\n  axios.patch(`${personsUrl}/${personObject.id}`, personObject);\n};\n\nexport default { getAll, addPerson, removePerson, updatePerson };\n","import React from \"react\";\n\nexport const ErrorNotification = ({ notificationMessage }) => {\n  if (notificationMessage === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{notificationMessage}</div>;\n};\n\nexport const Notification = ({ notificationMessage }) => {\n  if (notificationMessage === null) {\n    return null;\n  }\n\n  return <div className=\"notification\">{notificationMessage}</div>;\n};\n\nexport default { Notification, ErrorNotification };\n","import React, { useState, useEffect } from \"react\";\nimport { Filter } from \"./components/InputComponent\";\nimport { Persons } from \"./components/Persons\";\nimport { PersonForm } from \"./components/PersonForm\";\nimport personsApi from \"./services/personsApi\";\nimport { ErrorNotification, Notification } from \"./components/Notification\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [displayedPersons, setDisplayedPersons] = useState(persons);\n  const [notificationMsg, setNotificationMsg] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  const [newName, setNewName] = useState(\"\");\n  const [newTel, setNewTel] = useState(\"\");\n  const [newSearch, setNewSearch] = useState(\"\");\n\n  useEffect(() => {\n    personsApi.getAll().then((rsp) => {\n      setPersons(rsp.data);\n      setDisplayedPersons(rsp.data);\n    });\n  }, []);\n\n  const displayNotificationMsg = (notificationSetter, notificationText) => {\n    notificationSetter(notificationText);\n    setTimeout(() => notificationSetter(null), 2300);\n  };\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newTel,\n    };\n\n    // Check is person already on the list\n    const existingPerson = persons.filter((person) => person.name === newName);\n    if (existingPerson.length) {\n      //  Check if a person exists but with a different number\n      if (existingPerson[0].number !== newTel) {\n        const updateTelConfirm = window.confirm(\n          `${existingPerson[0].name} already added to the phone book, replace the old number with the new one?`\n        );\n        // Update if diff number and user want to.\n        if (updateTelConfirm) {\n          let updateObject = existingPerson[0];\n          updateObject.number = newTel;\n          console.log(updateObject);\n          personsApi.updatePerson(updateObject);\n          setNewName(\"\");\n          setNewTel(\"\");\n        }\n      } else {\n        // if person name and tell phone number matches, reject new entry\n        displayNotificationMsg(\n          setErrorMsg,\n          `${personObject.name} is already on the list!`\n        );\n      }\n    }\n\n    // Else add to the list if not exists\n    if (!existingPerson.length) {\n      personsApi\n        .addPerson(personObject)\n        .then((rsp) => {\n          console.log(persons, rsp.data);\n          // setDisplayedPersons([displayedPersons, ...rsp.data]);\n          // setPersons([persons, ...rsp.data]);\n          setNewName(\"\");\n          setNewTel(\"\");\n\n          displayNotificationMsg(\n            setNotificationMsg,\n            `${personObject.name} has been added!`\n          );\n        })\n        .catch((err) => {\n          displayNotificationMsg(setErrorMsg, err.message);\n        });\n    }\n  };\n\n  const removePerson = (id) => {\n    const personItem = persons.filter((person) => person.id === id)[0];\n    const confirmRsp = window.confirm(\n      `Delete ${personItem.name} from the reccord?`\n    );\n\n    if (confirmRsp) {\n      personsApi\n        .removePerson(id)\n        .then(() => {\n          const newDisplayPersons = displayedPersons.filter(\n            (person) => person.id !== id\n          );\n          setDisplayedPersons(newDisplayPersons);\n          displayNotificationMsg(setNotificationMsg, \"REMOVED\");\n        })\n        .catch((err) => displayNotificationMsg(setErrorMsg, err.message));\n    }\n  };\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewTel = (event) => {\n    setNewTel(event.target.value);\n  };\n\n  const handleNewSearch = (event) => {\n    setNewSearch(event.target.value);\n\n    const filteredPersons = persons.filter((person) =>\n      person.name.toLowerCase().includes(event.target.value.toLowerCase())\n    );\n\n    if (filteredPersons) {\n      setDisplayedPersons(filteredPersons);\n    }\n    // setPersons(persons);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Filter\n        inputText={\"Search\"}\n        inputValueState={newSearch}\n        onChangeHandler={handleNewSearch}\n      />\n      <Notification notificationMessage={notificationMsg} />\n      <ErrorNotification notificationMessage={errorMsg} />\n      <h3>Add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNewName={handleNewName}\n        newTel={newTel}\n        handleNewTel={handleNewTel}\n      />\n\n      <Persons\n        displayedPersons={displayedPersons}\n        deletePersonApiFunc={removePerson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}